结构型模式（Structural Pattern）描述如何将类或者对象结合在一起形成更大的结构，就像搭积木， 可以通过简单积木的组合形成复杂的、功能更为强大的结构。结构型模式可以分为类结构型模式和对象结构型模式，也可分为<a href="http://c.biancheng.net/view/1359.html" target='_blank'>代理模式</a>（Proxy）、<a href="http://c.biancheng.net/view/1361.html" target='_blank'>适配器模式</a>（Adapter）、<a href="http://c.biancheng.net/view/1364.html" target='_blank'>桥接模式</a>（Bridge）、<a href="http://c.biancheng.net/view/1366.html" target='_blank'>装饰模式</a> （Decorator ）、<a href="http://c.biancheng.net/view/1369.html" target='_blank'>外观模式</a>（Facade）、享元模式（Flyweight）和<a href="http://c.biancheng.net/view/1373.html" target='_blank'>组合模式</a>（Composite）等 7 类。</p><h3>实验目的</h3><p>本实验的主要目的如下。<ol><li>了解 7 种&ldquo;结构型模式&rdquo;的定义、特点和工作原理。</li><li>理解 7 种&ldquo;结构型模式&rdquo;的结构、实现和应用场景。</li><li>学会应用 7 种&ldquo;结构型模式&rdquo;进行软件开发。</li></ol></p><h3>实验原理</h3><p></p><h4>1. 结构型模式的工作原理</h4><p>结构型模式重点考虑类或对象的布局方式，其目的是将现有类或对象组成更大的结构。按照其显示方式的不同，结构型模式可分为类结构型模式和对象结构型模式。前者采用继承机制来组织接口和类，后者采用组合或聚合来组合对象。由于组合关系和或聚合关系比继承关系耦合度低，满足&ldquo;合成复用原则&rdquo;，所以对象结构型模式比类结构型模式具有更大的灵活性。如果按目的来分，结构 型模式共 7 种，每种模式的实验大概要花 2 个学时，大家可以根据实验计划来选做若干个实验。下面以代理（Proxy）模式为例，介绍其实验过程。</p><h4>2. 代理模式的工作原理</h4><p>代理模式是在访问对象和目标对象之间增加一个代理对象，该对象起到中介作用和保护目标对象的作用。另外，它还可以扩展目标对象的功能，并且将客户端与目标对象分离，这在一定程度上降低了系统的耦合度。代理模式的结构比较简单，主要是通过定义一个继承抽象主题的代理来包含真实主题，从而实现对真实主题的访问，其结构图如图 1 所示。<div class="img-container"><img alt="代理模式的结构图" src="http://c.biancheng.net/uploads/allimg/181119/3-1Q1191I62JR.gif" />图1 代理模式的结构图</div>代理模式的主要角色如下。<ol><li>抽象主题（Subject）类：通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li><li>真实主题（Real Subject）类：实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。</li><li>代理（Proxy）类：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问或控制或扩展真实主题的功能。</li></ol></p><h3>实验内容</h3><p>(1) 用代理模式设计一个房产中介的模拟程序。要求：房产中介有介绍和代售韶关碧桂园房子的权利，以及登记购房者信息权利。这里的房产中介是代理者，韶关碧桂园是真实主题。(2) 按照以上要求设计类图和编写 <a href="http://c.biancheng.net/java/" target='_blank'>Java</a> 源程序。</p><h3>实验要求</h3><p>所设计的实验程序要满足以下两点。<ol><li>体现&ldquo;代理模式&rdquo;的工作原理。</li><li>符合面向对象中的&ldquo;开���原则&rdquo;和&ldquo;里氏替换原则&rdquo;。</li></ol></p><h3>实验步骤</h3><p>(1) 用 UML 设计&ldquo;房产中介&rdquo;模拟程序的结构图。&ldquo;房产中介&rdquo;模拟程序的结构图如图 2 所示。<div class="img-container"><img alt="房产中介模拟程序的结构图" src="http://c.biancheng.net/uploads/allimg/181119/3-1Q1191IA4914.gif" />图2 房产中介模拟程序的结构图</div>(2) 根据结构图写出&ldquo;房产中介&rdquo;模拟程序的源代码。房产中介模拟程序的源代码如下。<pre class="language-cpp"><code>package proxy;import java.awt.*;import javax.swing.*;public class SgHouseProxy{    public static void main(String[] args)    {        HouseProxy proxy=new HouseProxy();        proxy.display();    }}//抽象主题：房主interface HouseOwner{    void display();}//真实主题：韶关碧桂园class SgBiguiyuan extends JFrame implements HouseOwner{    private static final long serialVersionUID=1L;    public SgBiguiyuan()    {        super(&quot;房产中介代售韶关碧桂园房子&quot;);                        }    public void display()    {               this.setLayout(new GridLayout(1,1));        JLabel l1=new JLabel(new ImageIcon(&quot;src/proxy/SgBiguiyuan.jpg&quot;));        this.add(l1);           this.pack();        this.setVisible(true);        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    }}//代理：房产中介class HouseProxy implements HouseOwner{    private SgBiguiyuan realSubject=new SgBiguiyuan();    public void display()    {        preRequest();        realSubject.display();        postRequest();    }    public void preRequest()    {          System.out.println(&quot;房产中介介绍韶关碧桂园房子。&quot;);    }    public void postRequest()    {          System.out.println(&quot;房产中介登记购房者信息。&quot;);    }}</code></pre>(3) 上机测试程序，写出运行结果。&ldquo;房产中介&rdquo;模拟程序的运行结果如图 3 所示。<div class="img-container"><img alt="房产中介模拟程序的运行结果" src="http://c.biancheng.net/uploads/allimg/181119/3-1Q1191IH2426.jpg" />图3 房产中介模拟程序的运行结果</div>(4) 按同样的步骤设计其他&ldquo;结构型模式&rdquo;的程序实例。(5) 写出实验心得。