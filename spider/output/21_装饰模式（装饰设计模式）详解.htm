在现实生活中，常常需要对现有产品增加新的功能或美化其外观，如房子装修、相片加相框等。在软件开发过程中，有时想用一些现存的组件。这些组件可能只是完成了一些核心功能。但在不改变其结构的情况下，可以动态地扩展其功能。所有这些都可以釆用装饰模式来实现。</p><h3>装饰模式的定义与特点</h3><p><span style="color:#006400;">装饰（Decorator）模式</span>的定义：指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式，它属于对象结构型模式。装饰（Decorator）模式的主要优点有：<ul><li>采用装饰模式扩展对象的功能比采用继承方式更加灵活。</li><li>可以设计出多个不同的具体装饰类，创造出多个不同行为的组合。</li></ul>��主要缺点是：装饰模式增加了许多子类，如果过度使用会使程序变得很复杂。</p><h3>装饰模式的结构与实现</h3><p>通常情况下，扩展一个类的功能会使用继承方式来实现。但继承具有静态特征，耦合度高，并且随着扩展功能的增多，子类会很膨胀。如果使用组合关系来创建一个包装对象（即装饰对象）来包裹真实对象，并在保持真实对象的类结构不变的前提下，为其提供额外的功能，这就是装饰模式的目标。下面来分析其基本结构和实现方法。</p><h4>1. 模式的结构</h4><p>装饰模式主要包含以下角色。<ol><li>抽象构件（Component）角色：定义一个抽象接口以规范准备接收附加责任的对象。</li><li>具体构件（Concrete&nbsp;&nbsp;&nbsp; Component）角色：实现抽象构件，通过装饰角色为其添加一些职责。</li><li>抽象装饰（Decorator）角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li><li>具体装饰（ConcreteDecorator）角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。</li></ol>装饰模式的结构图如图 1 所示。<div class="img-container"><img alt="装饰模式的结构图" src="http://c.biancheng.net/uploads/allimg/181115/3-1Q115142115M2.gif" />图1 装饰模式的结构图</div></p><h4>2. 模式的实现</h4><p>装饰模式的实现代码如下：<pre class="language-cpp"><code>package decorator;public class DecoratorPattern{    public static void main(String[] args)    {        Component p=new ConcreteComponent();        p.operation();        System.out.println(&quot;---------------------------------&quot;);        Component d=new ConcreteDecorator(p);        d.operation();    }}//抽象构件角色interface  Component{    public void operation();}//具体构件角色class ConcreteComponent implements Component{    public ConcreteComponent()    {        System.out.println(&quot;创建具体构件角色&quot;);           }       public void operation()    {        System.out.println(&quot;调用具体构件角色的方法operation()&quot;);               }}//抽象装饰角色class Decorator implements Component{    private Component component;       public Decorator(Component component)    {        this.component=component;    }       public void operation()    {        component.operation();    }}//具体装饰角色class ConcreteDecorator extends Decorator{    public ConcreteDecorator(Component component)    {        super(component);    }       public void operation()    {        super.operation();        addedFunction();    }    public void addedFunction()    {        System.out.println(&quot;为具体构件角色增加额外的功能addedFunction()&quot;);               }}</pre>程序运行结果如下：<pre class="info-box">创建具体构件角色调用具体构件角色的方法operation()---------------------------------调用具体构件角色的方法operation()为具体构件角色增加额外的功能addedFunction()</pre></p><h3>装饰模式的应用实例</h3><p>【例1】用装饰模式实现游戏角色&ldquo;莫莉卡&middot;安斯兰&rdquo;的变身。分析：在《恶魔战士》中，游戏角色&ldquo;莫莉卡&middot;安斯兰&rdquo;的原身是一个可爱少女，但当她变身时，会变成头顶及背部延伸出蝙蝠状飞翼的女妖，当然她还可以变为穿着漂亮外衣的少女。这些都可用装饰模式来实现，在本实例中的&ldquo;莫莉卡&rdquo;原身有 setImage(String t) 方法决定其显示方式，而其 变身&ldquo;蝙蝠状女妖&rdquo;和&ldquo;着装少女&rdquo;可以用 setChanger() 方法来改变其外观，原身与变身后的效果用 display() 方法来显示（<a href="http://c.biancheng.net/uploads/soft/181113/3-1Q115142F6.zip">点此下载其原身和变身后的图片</a>），图 2 所示是其结构图。<div class="img-container"><img alt="游戏角色“莫莉卡·安斯兰”的结构图" src="http://c.biancheng.net/uploads/allimg/181115/3-1Q115142204235.gif" />图2 游戏角色&ldquo;莫莉卡&middot;安斯兰&rdquo;的结构图</div>程序代码如下：<pre class="cpp">package decorator;import java.awt.*;import javax.swing.*;public class MorriganAensland{    public static void main(String[] args)    {        Morrigan m0=new original();        m0.display();        Morrigan m1=new Succubus(m0);        m1.display();        Morrigan m2=new Girl(m0);        m2.display();    }}//抽象构件角色：莫莉卡interface  Morrigan{    public void display();}//具体构件角色：原身class original extends JFrame implements Morrigan{    private static final long serialVersionUID = 1L;    private String t=&quot;Morrigan0.jpg&quot;;    public original()    {        super(&quot;《恶魔战士》中的莫莉卡&middot;安斯兰&quot;);                    }    public void setImage(String t)    {        this.t=t;               }    public void display()    {           this.setLayout(new FlowLayout());        JLabel l1=new JLabel(new ImageIcon(&quot;src/decorator/&quot;+t));        this.add(l1);           this.pack();               this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);          this.setVisible(true);    }}//抽象装饰角色：变形class Changer implements Morrigan{    Morrigan m;       public Changer(Morrigan m)    {        this.m=m;    }       public void display()    {        m.display();    }}//具体装饰角色：女妖class Succubus extends Changer{    public Succubus(Morrigan m)    {        super(m);    }       public void display()    {        setChanger();        super.display();       }    public void setChanger()    {        ((original) super.m).setImage(&quot;Morrigan1.jpg&quot;);               }}//具体装饰角色：少女class Girl extends Changer{    public Girl(Morrigan m)    {        super(m);    }       public void display()    {        setChanger();        super.display();       }    public void setChanger()    {        ((original) super.m).setImage(&quot;Morrigan2.jpg&quot;);               }}</pre>程序运行结果如图 3 所示。<div class="img-container"><img alt="游戏角色“莫莉卡·安斯兰”的变身" src="http://c.biancheng.net/uploads/allimg/181115/3-1Q115142234201.gif" />图3 游戏角色&ldquo;莫莉卡&middot;安斯兰&rdquo;的变身</div></p><h3>装饰模式的应用场景</h3><p>前面讲解了关于装饰模式的结构与特点，下面介绍其适用的应用场景，装饰模式通常在以下几种情况使用。<ul><li>当需要给一个现有类添加附加职责，而又不能采用生成子类的方法进行扩充时。例如，该类被隐藏或者该类是终极类或者采用继承方式会产生大量的子类。</li><li>当需要通过对现有的一组基本功能进行排列组合而产生非常多的功能时，采用继承关系很难实现，而采用装饰模式却很好实现。</li><li>当对象的功能要求可以动态地添加，也可以再动态地撤销时。</li></ul>装饰模式在 <a href="http://c.biancheng.net/java/" target='_blank'>Java</a> 语言中的最著名的应用莫过于 Java I/O 标准库的设计了。例如，InputStream 的子类 FilterInputStream，OutputStream 的子类 FilterOutputStream，Reader 的子类 BufferedReader 以及 FilterReader，还有 Writer 的子类 BufferedWriter、FilterWriter 以及 PrintWriter 等，它们都是抽象装饰类。下面代码是为 FileReader 增加缓冲区而采用的装饰类 BufferedReader 的例子：<pre class="cpp">BufferedReader in=new BufferedReader(new FileReader(&quot;filename.txtn));String s=in.readLine();</code></pre></p><h3>装饰模式的扩展</h3><p>装饰模式所包含的 4 个角色不是任何时候都要存在的，在有些应用环境下模式是可以简化的，如以下两种情况。(1) 如果只有一个具体构件而没有抽象构件时，可以让抽象装饰继承具体构件，其结构图如图 4 所示。<div class="img-container"><img alt="只有一个具体构件的装饰模式" src="http://c.biancheng.net/uploads/allimg/181115/3-1Q11514230H05.gif" />图4 只有一个具体构件的装饰模式</div>(2) 如果只有一个具体装饰时，可以将抽象装饰和具体装饰合并，其结构图如图 5 所示。<div class="img-container"><img alt="只有一个具体装饰的装饰模式" src="http://c.biancheng.net/uploads/allimg/181115/3-1Q115142333D3.gif" />图5 只有一个具体装饰的装饰模式</div>