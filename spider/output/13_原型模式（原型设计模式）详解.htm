在有些系统中，存在大量相同或相似对象的创建问题，如果用传统的构造函数来创建对象，会比较复杂且耗时耗资源，用原型模式生成对象就很高效，就像孙悟空拔下猴毛轻轻一吹就变出很多孙悟空一样简单。</p><h3>原型模式的定义与特点</h3><p><span style="color:#006400;">原型（Prototype）模式</span>的定义如下：用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象。在这里，原型实例指定了要创建的对象的种类。用这种方式创建对象非常高效，根本无须知道对象创建的细节。例如，Windows 操作系统的安装通常较耗时，如果复制就快了很多。在生活中复制的例子非常多，这里不一一列举了。</p><h3>原型模式的结构与实现</h3><p>由于 <a href="http://c.biancheng.net/java/" target='_blank'>Java</a> 提供了对象的 clone() 方法，所以用 Java 实现原型模式很简单。</p><h4>1. 模式的结构</h4><p>原型模式包含以下主要角色。<ol><li>抽象原型类：规定了具体原型对象必须实现的接口。</li><li>具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。</li><li>访问类：使用具体原型类中的 clone() 方法来复制新的对象。</li></ol>其结构图如图 1 所示。<div class="img-container"><img alt="原型模式的结构图" src="http://c.biancheng.net/uploads/allimg/181114/3-1Q114101Fa22.gif" />图1 原型模式的结构图</div></p><h4>2. 模式的实现</h4><p>原型模式的克隆分为<span style="color:#006400;">浅克隆</span>和<span style="color:#006400;">深克隆</span>，Java 中的 Object 类提供了浅克隆的 clone() 方法，具体原型类只要实现 Cloneable 接口就可实现对象的浅克隆，这里的 Cloneable 接口就是抽象原型类。其代码如下：<pre class="language-cpp"><code>//具体原型类class Realizetype implements Cloneable{    Realizetype()    {        System.out.println(&quot;具体原型创建成功！&quot;);    }    public Object clone() throws CloneNotSupportedException    {        System.out.println(&quot;具体原型复制成功！&quot;);        return (Realizetype)super.clone();    }}//原��模式的测试类public class PrototypeTest{    public static void main(String[] args)throws CloneNotSupportedException    {        Realizetype obj1=new Realizetype();        Realizetype obj2=(Realizetype)obj1.clone();        System.out.println(&quot;obj1==obj2?&quot;+(obj1==obj2));    }}</pre>程序的运行结果如下：<pre class="info-box">具体原型创建成功！具体原型复制成功！obj1==obj2?false</pre></p><h3>原型模式的应用实例</h3><p>【例1】用原型模式模拟&ldquo;孙悟空&rdquo;复制自己。分析：孙悟空拔下猴毛轻轻一吹就变出很多孙悟空，这实际上是用到了原型模式。这里的孙悟空类 SunWukong 是具体原型类，而 Java 中的 Cloneable 接口是抽象原型类。同前面介绍的猪八戒实例一样，由于要显示孙悟空的图像（<a href="http://c.biancheng.net/uploads/soft/181113/3-1Q114103933.zip">点击此处下载该程序所要显示的孙悟空的图片</a>），所以将孙悟空类定义成面板 JPanel 的子类，里面包含了标签，用于保存孙悟空的图像。另外，重写了 Cloneable 接口的 clone() 方法，用于复制新的孙悟空。访问类可以通过调用孙悟空的 clone() 方法复制多个孙悟空，并在框架窗体 JFrame 中显示。图 2 所示是其结构图。<div class="img-container"><img alt="孙悟空生成器的结构图" src="http://c.biancheng.net/uploads/allimg/181114/3-1Q114101K4L9.gif" />图2 孙悟空生成器的结构图</div>程序代码如下：<pre class="cpp">import java.awt.*;import javax.swing.*;class SunWukong extends JPanel implements Cloneable{    private static final long serialVersionUID = 5543049531872119328L;    public SunWukong()    {        JLabel l1=new JLabel(new ImageIcon(&quot;src/Wukong.jpg&quot;));        this.add(l1);       }    public Object clone()    {        SunWukong w=null;        try        {            w=(SunWukong)super.clone();        }        catch(CloneNotSupportedException e)        {            System.out.println(&quot;拷贝悟空失败!&quot;);        }        return w;    }}public class ProtoTypeWukong{    public static void main(String[] args)    {        JFrame jf=new JFrame(&quot;原型模式测试&quot;);        jf.setLayout(new GridLayout(1,2));        Container contentPane=jf.getContentPane();        SunWukong obj1=new SunWukong();        contentPane.add(obj1);               SunWukong obj2=(SunWukong)obj1.clone();        contentPane.add(obj2);           jf.pack();               jf.setVisible(true);        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);       }}</pre>程序的运行结果如图 3 所示。<div class="img-container"><img alt="孙悟空克隆器的运行结果" src="http://c.biancheng.net/uploads/allimg/181114/3-1Q114102002601.gif" />图3 孙悟空克隆器的运行结果</div><span style="color:#b22222;">用原型模式除了可以生成相同的对象，还可以生成相似的对象</span>，请看以下实例。【例2】用原型模式生成&ldquo;三好学生&rdquo;奖状。分析：同一学校的&ldquo;三好学生&rdquo;奖状除了获奖人姓名不同，其他都相同，属于相似对象的复制，同样可以用原型模式创建，然后再做简单修改就可以了。图 4 所示是三好学生奖状生成器的结构图。<div class="img-container"><img alt="奖状生成器的结构图" src="http://c.biancheng.net/uploads/allimg/181114/3-1Q114101SUJ.gif" />图4 奖状生成器的结构图</div>程序代码如下：<pre class="cpp">public class ProtoTypeCitation{    public static void main(String[] args) throws CloneNotSupportedException    {        citation obj1=new citation(&quot;张三&quot;,&quot;同学：在2016学年第一学期中表现优秀，被评为三好学生。&quot;,&quot;韶关学院&quot;);        obj1.display();        citation obj2=(citation) obj1.clone();        obj2.setName(&quot;李四&quot;);         obj2.display();    }}//奖状类class citation implements Cloneable{    String name;    String info;    String college;    citation(String name,String info,String college)    {        this.name=name;        this.info=info;        this.college=college;        System.out.println(&quot;奖状创建成功！&quot;);    }    void setName(String name)    {        this.name=name;    }    String getName()    {        return(this.name);    }    void display()    {        System.out.println(name+info+college);    }    public Object clone() throws CloneNotSupportedException    {        System.out.println(&quot;奖状拷贝成功！&quot;);        return (citation)super.clone();    }}</pre>程序运行结果如下：<pre class="info-box">奖状创建成功！张三同学：在2016学年第一学期中表现优秀，被评为三好学生。韶关学院奖状拷贝成功！李四同学：在2016学年第一学期中表现优秀，被评为三好学生。韶关学院</pre></p><h3>原型模式的应用场景</h3><p>原型模式通常适用于以下场景。<ul><li>对象之间相同或相似，即只是个别的几个属性不同的时候。</li><li>对象的创建过程比较麻烦，但复制比较简单的时候。</li></ul></p><h3>原型模式的扩展</h3><p>原型模式可扩展为带原型管理器的原型模式，它在原型模式的基础上增加了一个原型管理器 PrototypeManager 类。该类用 HashMap 保存多个复制的原型，Client 类可以通过管理器的 get(String id) 方法从中获取复制的原型。其结构图如图 5 所示。<div class="img-container"><img alt="带原型管理器的原型模式的结构图" src="http://c.biancheng.net/uploads/allimg/181114/3-1Q114102049214.gif" />图5 带原型管理器的原型模式的结构图</div>【例3】用带原型管理器的原型模式来生成包含&ldquo;圆&rdquo;和&ldquo;正方形&rdquo;等图形的原型，并计算其面积。分析：本实例中由于存在不同的图形类，例如，&ldquo;圆&rdquo;和&ldquo;正方形&rdquo;，它们计算面积的方法不一样，所以需要用一个原型管理器来管理它们，图 6 所示是其结构图。<div class="img-container"><img alt="图形生成器的结构图" src="http://c.biancheng.net/uploads/allimg/181114/3-1Q11410212a20.gif" />图6 图形生成器的结构图</div>程序代码如下：<pre class="cpp">import java.util.*;interface Shape extends Cloneable{    public Object clone();    //拷贝    public void countArea();    //计算面积}class Circle implements Shape{    public Object clone()    {        Circle w=null;        try        {            w=(Circle)super.clone();        }        catch(CloneNotSupportedException e)        {            System.out.println(&quot;拷贝圆失败!&quot;);        }        return w;    }    public void countArea()    {        int r=0;        System.out.print(&quot;这是一个圆，请输入圆的半径：&quot;);        Scanner input=new Scanner(System.in);        r=input.nextInt();        System.out.println(&quot;该圆的面积=&quot;+3.1415*r*r+&quot;\n&quot;);    }}class Square implements Shape{    public Object clone()    {        Square b=null;        try        {            b=(Square)super.clone();        }        catch(CloneNotSupportedException e)        {            System.out.println(&quot;拷贝正方形失败!&quot;);        }        return b;    }    public void countArea()    {        int a=0;        System.out.print(&quot;这是一个正方形，请输入它的边长：&quot;);        Scanner input=new Scanner(System.in);        a=input.nextInt();        System.out.println(&quot;该正方形的面积=&quot;+a*a+&quot;\n&quot;);    }}class ProtoTypeManager{    private HashMap&lt;String, Shape&gt;ht=new HashMap&lt;String,Shape&gt;();     public ProtoTypeManager()    {        ht.put(&quot;Circle&quot;,new Circle());           ht.put(&quot;Square&quot;,new Square());    }     public void addshape(String key,Shape obj)    {        ht.put(key,obj);    }    public Shape getShape(String key)    {        Shape temp=ht.get(key);        return (Shape) temp.clone();    }}public class ProtoTypeShape{    public static void main(String[] args)    {        ProtoTypeManager pm=new ProtoTypeManager();            Shape obj1=(Circle)pm.getShape(&quot;Circle&quot;);        obj1.countArea();                  Shape obj2=(Shape)pm.getShape(&quot;Square&quot;);        obj2.countArea();         }}</pre>运行结果如下所示：<pre class="info-box">这是一个圆，请输入圆的半径：3该圆的面积=28.2735这是一个正方形，请输入它的边长：3该正方形的面积=9</code></pre>